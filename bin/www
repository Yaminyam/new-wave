#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../main");
var debug = require("debug")("newwave:server");
var https = require("https");
var fs = require("fs");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var options = {
  key: fs.readFileSync("key.pem"),
  cert: fs.readFileSync("cert.pem"),
};
var server = https.createServer(options, app).listen(port, () => {
  console.log("Server is running on port " + port);
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.on("error", onError);
server.on("listening", onListening);

var { Server } = require("socket.io");
var io = new Server(server);

io.on("connection", (socket) => {
  console.log("a user connected");
  socket.on("New user", (location) => {
    console.log("new user");
    io.emit("New user", location);
  });
  socket.on("join-room", (roomId) => {
    socket.join(roomId);

    //socket.to(roomId).emit("user-connected");

    socket.on("chat message", (msg) => {
      console.log("chat");
      io.to(roomId).emit("chat message", msg);
    });
    socket.on("disconnect", () => {
      socket.to(roomId).emit("user-disconnected", userId);
    });
  });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
